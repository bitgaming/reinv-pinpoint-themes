// app global css in SCSS form
@import "mixins.scss";

@include create-spacing-rules(38);

.my-px {
  padding-left: map-get(map-get($spaces, "xs"), "x");
  padding-right: map-get(map-get($spaces, "xs"), "x");

  @media (min-width: $breakpoint-sm-min) {
    padding-left: map-get(map-get($spaces, "sm"), "x");
    padding-right: map-get(map-get($spaces, "sm"), "x");
  }

  @media (min-width: $breakpoint-md-min) {
    padding-left: map-get(map-get($spaces, "md"), "x");
    padding-right: map-get(map-get($spaces, "md"), "x");
  }

  @media (min-width: $breakpoint-lg-min) {
    padding-left: map-get(map-get($spaces, "lg"), "x");
    padding-right: map-get(map-get($spaces, "lg"), "x");
  }

  @media (min-width: $breakpoint-xl-min) {
    padding-left: map-get(map-get($spaces, "xl"), "x");
    padding-right: map-get(map-get($spaces, "xl"), "x");
  }
}

.my-pl {
  padding-left: map-get(map-get($spaces, "xs"), "x");

  @media (min-width: $breakpoint-sm-min) {
    padding-left: map-get(map-get($spaces, "sm"), "x");
  }

  @media (min-width: $breakpoint-md-min) {
    padding-left: map-get(map-get($spaces, "md"), "x");
  }

  @media (min-width: $breakpoint-lg-min) {
    padding-left: map-get(map-get($spaces, "lg"), "x");
  }

  @media (min-width: $breakpoint-xl-min) {
    padding-left: map-get(map-get($spaces, "xl"), "x");
  }
}

.my-pr {
  padding-right: map-get(map-get($spaces, "xs"), "x");

  @media (min-width: $breakpoint-sm-min) {
    padding-right: map-get(map-get($spaces, "sm"), "x");
  }

  @media (min-width: $breakpoint-md-min) {
    padding-right: map-get(map-get($spaces, "md"), "x");
  }

  @media (min-width: $breakpoint-lg-min) {
    padding-right: map-get(map-get($spaces, "lg"), "x");
  }

  @media (min-width: $breakpoint-xl-min) {
    padding-right: map-get(map-get($spaces, "xl"), "x");
  }
}

@font-face{
  font-family: 'Roboto Mono';
  src: url($mono-font-path)
}

::-webkit-scrollbar {
  cursor: grab;
  width: 6px;
  height: 6px;
  background: transparent;
}

::-webkit-scrollbar-thumb {
  cursor: grab;
  border-radius: 3px;
  background-color: rgba($color: #000000, $alpha: .1);

  .body--dark & {
    background-color: rgba($color: #fff, $alpha: .1);
  }
}

::-webkit-scrollbar-corner {
	background: transparent;
}


body {
  font-smooth: always;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  &.body--dark,
  &.body--dark .q-menu .q-card,
  &.body--dark .q-menu {
    color: var(--q-color-font-color--dark, #{$light});
    background: var(--q-color-dark-page, #{$dark-page});
  }
}

.custom-standout {
  &.q-field--standout,
  &.q-field--standout.q-field--focused {
    .q-field__native,
    .q-field__prefix,
    .q-field__suffix,
    .q-field__prepend,
    .q-field__append,
    .q-field__input {
      color: $light;
    }
  }
}

.body--dark {
  .q-table__card {
    box-shadow: none;
  }
}

.hidden-canvas {
  position: absolute;
  width: 0;
  height: 0;
}

a:not(.q-item), .link {
  color: var(--q-color-anchor-color, #{$info});
  text-decoration: none;
  cursor: pointer;

  .body--dark & {
    color: var(--q-color-anchor-color--dark, #{$info});
  }

  &:hover,
  &:active {
    text-decoration: underline;
  }
}

.q-card {
  .body--dark & {
    box-shadow: none;
  }
}

.vjs-tree,
.wrap {
  white-space: normal;
  word-wrap: break-word;
}

// custom vue-json-pretty style
.vjs-tree.is-mouseover {
  .body--dark & {
    background-color: $grey-9;
  }
}
.vjs-tree {
  font-size: 12px !important;
}

.q-drawer--on-top {
  z-index: 2999;
}

.sticky-header-table {
  height: 100%;
  /* height or max-height is important */

  .q-table__top,
  .q-table__bottom,
  thead tr:first-child th {
    /* bg color is important for th; just specify one */
    background-color: $light;

    .body--dark & {
      background-color: var(--q-color-dark, #{$dark});
    }
  }

  thead tr th {
    position: sticky;
    z-index: 1;
  }
  thead tr:first-child th {
    top: 0;
  }

  /* this is when the loading indicator appears */
  &.q-table--loading:not(.custom-loading) {
    /* height of all previous header rows */
    thead tr:last-child th {
      top: 48px;
    }

    &.q-table--dense thead tr:last-child th {
      top: 28px;
    }
  }
}

.roboto-mono {
  font-family: $mono-font-family;
  letter-spacing: -0.12px;
}

.roboto-mono--important {
  font-family: $mono-font-family !important;
  letter-spacing: -0.12px !important;
}

.text-color-1 {
  color: $text-color-1 !important;
}

.text-color-2 {
  color: $text-color-2 !important;
}

.q-item__section--avatar {
  min-width: unset;
}

.text-positive {
  color: $positive !important;
}

.text-negative {
  color: $negative !important;
}

.flex-grow-y {
  height: 1px;
  flex-grow: 1;
}

.flex-grow-x {
  width: 1px;
  min-width: 0;
  flex: 1;
}

.break-word {
  // overflow-wrap: break-word;
  // display: inline-block;
  word-break: break-word;
}

.grid-fill-200 {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: .6rem;
}

.grid-fill-270 {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));
  gap: .6rem;
}

.bg-page {
  background: #fff;

  .body--dark & {
    background: var(--q-color-dark-page, $dark-page);
  }
}

.bg-none {
  background: none;
}

.bg-half-transparent {
  background: $bg-half-transparent;

  .body--dark & {
    background: $bg-half-transparent-dark;
    // background: var(--q-color-dark, #{$dark});
  }
}

.bg-half-transparent--dark {
  background: $bg-half-transparent-dark;
}

.my-primary {
  background-color: $warning;

  .body--dark & {
    background-color: $accent;
  }
}

.main-card {
  max-width: 1100px;
}

.dialog-form-card {
  width: 700px;
  max-width: 80vw !important;
}

.breadcrumbs-height {
  height: $breadcrumbs-height;
}

.my-tab {
  height: 50px;

  &:not(.my-px) {
    padding-left: map-get(map-get($spaces, "lg"), "x");
    padding-right: map-get(map-get($spaces, "lg"), "x");
  }
  
  .q-tab__label {
    font-size: 16px;
  }
}

.px-md {
  padding-left: map-get(map-get($spaces, "md"), "x") !important;
  padding-right: map-get(map-get($spaces, "md"), "x") !important;
}

.my-btn.q-btn--outline .q-btn__wrapper:before,
td,
.q-tab,
.my-gray {
  border-color: rgba($color: #000000, $alpha: .3);
  color: $grey-7;

  .body--dark & {
    border-color: rgba($color: #ffffff, $alpha: .3);
    color: $grey-5;
  }
}

.my-separator-bg {
  background: $grey-6;

  .body--dark & {
    background: $grey-7;
  }
}

.my-gray-border {
  border: 1px solid $separator-color;

  .body--dark & {
    border-color: $separator-dark-color;
  }
}

.my-gray-border-color {
  border-color: $separator-color;

  .body--dark & {
    border-color: $separator-dark-color;
  }
}

.my-gray-solid-shadow {
  -webkit-box-shadow: 0px 0px 0px 1px $separator-color; 
  box-shadow: 0px 0px 0px 1px $separator-color;

  .body--dark & {
    border-color: $separator-dark-color;
  }
}

.black-white {
  color: #000;
  .body--dark & {
    color: #fff;
  }
}

.min-height-unset {
  min-height: unset;
}

.overlay {
  position: fixed;
  top: 0;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(2px);
  z-index: 1999;
}

.q-table--dense .q-table td {
  padding: 6px 8px;
}

.q-table td,
.q-table th,
.q-table thead,
.q-table tr,
.q-table__bottom {
  border-color: rgba(0, 0, 0, 0.09);

  .body--dark & {
    border-color: rgba(255, 255, 255, 0.09);
  }
}

.q-notification__message {
  overflow-wrap: break-word;
}

.q-badge {
  padding: 4px 6px;
}

.flex-row {
  flex-direction: row !important;
}

.q-btn.q-btn--dense {
  .q-icon {
    width: 18px;
    height: 18px;
  }
}

.my-pagination {
  height: 24px;
  .q-field--auto-height.q-field--dense .q-field__control,
  .q-field--auto-height.q-field--dense .q-field__native {
    min-height: unset;
    height: auto;
    padding: none;
  }

  .q-field--dense .q-field__marginal {
    height: 12px;
  }

  .q-field__native, .q-field__prefix, .q-field__suffix, .q-field__input {
    padding: none;
  }

  .q-field--dense .q-field__control, .q-field--dense .q-field__marginal {
    height: auto;
  }

  .rpp-label {
    @media (max-width: $breakpoint-md-max) {
      display: none;
    }
  }
}

.filter-input {
  max-width: 120px;
}

.my-table-page {
  --left-width: 0px;

  .left {
    display: none;
    width: var(--left-width);
    min-width: var(--left-width);
    max-width: var(--left-width);
    position: -webkit-sticky;
    position: sticky;
    z-index: 991;
  }

  .right {
    width: calc(100vw - var(--left-width));
    min-width: calc(100vw - var(--left-width));
    max-width: calc(100vw - var(--left-width));
    padding-bottom: map-get(map-get($spaces, "xl"), "y");
  }

  .mobile-btn-group {
    position: fixed;
    z-index: 2;
    right: map-get(map-get($spaces, "sm"), "x");
    bottom: map-get(map-get($spaces, "sm"), "y");
  }

  @media (min-width: $breakpoint-md-min) {
    --left-width: 280px;
    .left {
      display: block;
    }
    .right {
      padding-bottom: unset;
    }
    .mobile-btn-group {
      display: none;
    }
  }
}

.border-bottom {
  border-bottom-style: solid;
  border-bottom-width: 1px;
}

.flex-unset {
  flex: unset;
}

.pl-none {
  padding-left: 0 !important;
}

.pl-sm {
  padding-left: map-get(map-get($spaces, "sm"), "x") !important;
}

.pl-md {
  padding-left: map-get(map-get($spaces, "md"), "x") !important;
}

.pr-sm {
  padding-right: map-get(map-get($spaces, "sm"), "x") !important;
}

.pr-md {
  padding-right: map-get(map-get($spaces, "md"), "x") !important;
}

.justify-start--important {
  justify-content: flex-start !important;
}

.q-chip__icon--remove {
  opacity: 0;
  transition: opacity .3s ease;

  .q-chip:hover & {
    opacity: 1;
  }
}

.body--dark {
  .q-menu,
  .q-dialog .q-card {
    border: 1px solid var(--q-color-primary-border--dark);
  }  
}

.bg-none {
  background: none !important;
}

.q-dialog__backdrop.fixed-full {
  backdrop-filter: blur(2px);
}